<?xml version="1.0" encoding="utf-8" ?>

<package>
<job id="wscmd">
<?job error="true" debug="false" ?>

<runtime>
<description><![CDATA[Windows Scripting Command Interpreter Version 0.6 Beta
Copyright (C) 2009 Ildar Shaimordanov

For details of used libraries follow this link 
http://code.google.com/p/jsxt/source/browse/doc/jsxt.html.
]]></description>
<named
	name="E"
	helpstring="Execute a value as a JavaScript code."
	type="string"
	required="false"
/>
<named
	name="F"
	helpstring="Execute a JavaScript code from the file."
	type="string"
	required="false"
/>
<named
	name="I"
	helpstring="Interactive mode"
	type="simple"
	required="false"
/>
<named
	name="H"
	helpstring="Display this help"
	type="simple"
	required="false"
/>
<example>
Example: wscmd.wsf /E:code
Example: wscmd.wsf /F:filename
Example: wscmd.wsf /I
</example>
</runtime>
<!--
@echo off


set wscmd_file=$$$%~n0.wsf
set wscmd_main=%~d0\PROGS\TOOLS\.DEVEL\jsxt\wscmd.wsf
set wscmd_cmnd=cscript //NoLogo //H:CScript


set wscmd_spec=/h
call :check_for_special_args %*
if not defined wscmd_spec goto :EOF


set wscmd_spec=/i
call :check_for_special_args %*
if not defined wscmd_spec goto :EOF


%wscmd_cmnd% "%wscmd_main%" /compile-and-output %* >"%wscmd_file%"


if errorlevel 1 type "%wscmd_file%" && call :del_compiled
if not exist "%wscmd_file%" goto :EOF


%wscmd_cmnd% "%wscmd_file%" %*
call :del_compiled


goto :EOF


:del_compiled
del "%wscmd_file%"
goto :EOF


:check_for_special_args
set wscmd_arg=%~1
if not defined wscmd_arg goto :EOF
set wscmd_arg=%wscmd_arg:"=%
if    "%wscmd_arg%" == "" goto :EOF
if /i "%wscmd_arg%" == "%wscmd_spec%" (
	%wscmd_cmnd% "%wscmd_main%" %wscmd_spec%
	set wscmd_spec=
	goto :EOF
)
shift
goto check_for_special_args
-->
<object id="fso" progid="Scripting.FileSystemObject" />
<object id="shell" progid="WScript.Shell" />
<script language="javascript" src="js/Core.js"></script>
<script language="javascript" src="js/Benchmark.js"></script>
<script language="javascript" src="js/Globals.js"></script>
<script language="javascript" src="js/Array.js"></script>
<script language="javascript" src="js/Object.js"></script>
<script language="javascript" src="js/Date.js"></script>
<script language="javascript" src="js/NetIP.js"></script>
<script language="javascript" src="js/jsmin.js"></script>
<script language="javascript" src="js/jsbeautify.js"></script>
<script language="javascript" src="js/Ajax.js"></script>
<script language="javascript" src="js/win32/FileSystem.js"></script>
<script language="javascript" src="js/win32/Enumerator.js"></script>
<script language="javascript" src="js/win32/jsmin.file.js"></script>
<script language="javascript" src="js/win32/jsbeautify.file.js"></script>
<script language="javascript"><![CDATA[

var echo = print = function()
{
	WScript.Echo(Array.linearize(arguments).join(' '));
};

var quit = exit = function()
{
	WScript.Quit(arguments[0]);
};

var help = function()
{
	WScript.Arguments.ShowUsage();
};

var uarg = [];
var narg = {};
var narg_len = 0;

]]></script>
<!-- BEGIN COMPILER -->
<script language="javascript"><![CDATA[

/**
 *
 * Enabled in the CLI mode ONLY
 *
 */
if ( ! WScript.FullName.match(/cscript/i) || WScript.Arguments.length == 0 || WScript.Arguments.Named.Exists('H') ) {
	help();
	exit();
}

/**
 *
 * Interactive mode
 *
 */
if ( WScript.Arguments.Named.Exists('I') ) {

	while ( true ) {

		WScript.StdOut.Write('wscmd > ');

		var e;
		try {

			eval((function()
			{
				var stack = [];
				var quote = false;
				var regex = false;
				var slash = false;

				var result = '';

				var input;
				var i;
				var c;

				while ( true ) {

					input = WScript.StdIn.ReadLine();

					i = 0;
					while ( i < input.length ) {

						c = input.charAt(i);
						i++;

						// SLASH is special character
						if ( slash ) {
							slash = false;
							continue;
						}

						slash = c == '\\';

						// Process literal strings
						if ( c == '\'' || c == '\"' ) {
							if ( regex ) {
								continue;
							}

							if ( slash ) {
								continue;
							}

							if ( quote ) {
								if ( c == stack[stack.length - 1] ) {
									quote = false;
									stack.length--;
								}
							} else {
								quote = true;
								stack[stack.length] = c;
							}

							continue;
						}

						// Process regular expressions
						if ( c == '/' ) {
							if ( quote ) {
								continue;
							}

							if ( slash ) {
								continue;
							}

							if ( regex ) {
								if ( c == stack[stack.length - 1] ) {
									regex = false;
									stack.length--;
								}
							} else {
								regex = true;
								stack[stack.length] = c;
							}

							continue;
						}

						// Store on the stack opening brackets
						if ( c == '[' || c == '(' || c == '{' ) {
							stack[stack.length] = c;
							continue;
						}

						// Release stack when closing brackets arise
						var o = stack[stack.length - 1];
						if (
							o == '[' && c == ']' 
							|| 
							o == '(' && c == ')' 
							|| 
							o == '{' && c == '}' 
						) {
							stack.length--;
						}

					} // while ( i < input.length )

					result += input;

					if ( stack.length == 0 && ! quote && ! regex ) {
						break;
					}

					WScript.StdOut.Write('wscmd :: ');

				}; // while ( true )

				return result;
			})());

		} catch (e) {

			WScript.Echo('name\t:\t' + e.name);
			WScript.Echo('message\t:\t' + e.message);
			WScript.Echo('line\t:\t' + ((e.number >> 0x10) & 0x1FFF));
			WScript.Echo('code\t:\t' + (e.number & 0xFFFF));

		}

	}

	WScript.Quit();

}

var script;

(function()
{
	var file_not_found = function(filename)
	{
		'File "%s" not found'.sprintf(filename).print();
		exit(255);
	};

	/**
	 *
	 * Unnamed arguments
	 *
	 */
	uarg = Array.enumerate(WScript.Arguments.Unnamed, function(i)
	{
		return i;
	});

	/**
	 *
	 * /COMPILE-AND-OUTPUT
	 *
	 */
	var compile_and_output;
	if ( WScript.Arguments.Named.Exists('compile-and-output') ) {
		compile_and_output = WScript.Arguments.Named.item('compile-and-output') || true;
	}

	/**
	 *
	 * Unnamed arguments
	 *
	 */
	var compiled = [];

	var lang = {'js': 'javascript', 'vbs': 'vbscript'};
	var scriptOuter = '<!-- ID: %s -->\n\x3Cscript language="%s"%s>%s</script\x3E';
	var scriptInner = '\x3C![CDATA[\n\n%s\n\n]]\x3E';

	Array.enumerate(WScript.Arguments.Named, function(name)
	{
		var value = WScript.Arguments.Named.item(name) || '';

		//
		// Looking for special arguments:
		//     /E, /EID, /ELANG, /EIDLANG
		//     /F, /FID
		//
		// where
		//     ID   - the numeric identifier of this code
		//     LANG - one of the 'js' or 'vbs'
		//
		var matches = name.match(/^(e)(\d+)?(js|vbs)?$|^(f)(\d+)?$|^(compile-and-output)$/i);

		if ( ! matches ) {
			narg_len++;
			narg[name] = value;
			return;
		}

		if ( ! compile_and_output || ! value || matches[6] ) {
			return;
		}

		var e = matches[1];
		var f = matches[4];
		var l = matches[3].toLowerCase() || 'js';

		if ( f ) {
			if ( ! fso.FileExists(value) ) {
				file_not_found(value);
			}
			l = value.match(/\.(js|vbs)$/)[1];
		}

		compiled.push(scriptOuter.sprintf(
			matches[2] || matches[5] || 'No ID', 
			lang[l], 
			e ? '' : ' src="%s"'.sprintf(value), 
			f ? '' : scriptInner.sprintf(value)
		));
	});

	/**
	 *
	 * Extended mode
	 *
	 */
	var parse_link = function(string, base)
	{
		return string
			.replace(/(<script language="(?:javascript|vbscript)" src=")([^"]+)("><\/script>)/g, function($0, $1, $2, $3)
			{
				var filename = $2;
				if ( ! filename.match(/^[a-zA-Z]:/) ) {
					filename = base + filename;
				}
				return $1 + fso.GetAbsolutePathName(filename) + $3;
			});
	};

	var content;

	if ( compile_and_output ) {
		if ( narg_len ) {
			var result = narg.toArray(function(value, key)
			{
				return '"%s": "%s"'.sprintf(key, value);
			}, true);

			compiled.unshift(scriptOuter.sprintf(
				'NAMED ARGUMENTS', 
				lang.js, 
				'', 
				scriptInner.sprintf('var narg = {' + result.join(', ') + '};\nvar narg_len = ' + narg_len + ';\n')
			));
		}

		if ( uarg.length ) {
			compiled.unshift(scriptOuter.sprintf(
				'UNNAMED ARGUMENTS', 
				lang.js, 
				'', 
				scriptInner.sprintf('var uarg = ["' + uarg.join('", "') + '"];')
			));
		}

		content = FileSystem.readFile(WScript.ScriptFullName).split(/<!-- \w+ COMPILER -->/);

		content[0] = parse_link(content[0], fso.GetParentFolderName(WScript.ScriptFullName) + '\\');
		content[1] = parse_link(compiled.join('\n'), shell.CurrentDirectory + '\\');

		print(content.join(''));

		exit();
	}

	/**
	 *
	 * Simplified mode
	 *
	 */
	var named = WScript.Arguments.Named;
	var e = named.Exists('e');
	var f = named.Exists('f');

	if ( e && ! f ) {

		script = named.item('e');

	} else if ( ! e && f ) {

		var filename = named.item('f');
		if ( ! fso.FileExists(filename) ) {
			file_not_found(filename);
		}

		script = FileSystem.readFile(filename);

	} else if ( e && f ) {
		print('You have to define both inline script or filename');
		exit(255);
	} else {
		help();
		exit();
	}
})();

/**
 *
 * Simplified mode
 *
 */
var e;
try {

	eval(script);

} catch (e) {

	e.format().print();

}

]]></script>
<!-- END COMPILER -->
</job>
</package>

